   //copy单个


GPIOC->ODR ^=1<<13;

GPIOC->ODR |=1<<13;

GPIOC->ODR &=~(1<<13);

*(uint32_t *)(0x40003000)=0xAAAA;//喂独立狗

  *(uint32_t *)(0x40002C00)=127;  //喂窗口狗

  HAL_ADCEx_Calibration_Start(&hadc1);   //adc    f1
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adc_value, 1);

uint8_t i=HAL_RCC_GetSysClockFreq();   //看系统时钟频率

HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13 );
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
HAL_Delay(100);
HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 );
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, receivedata, 50);
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);//关闭中断
  
HAL_UART_Transmit_DMA(&huart1, (uint8_t*)data,strlen (data));
HAL_UART_Transmit_DMA(&huart1, arr,5);

HAL_TIM_Base_Start(&htim4);
HAL_TIM_Base_Start_IT(&htim4);
__HAL_TIM_GET_COUNTER(&htim4);
__HAL_TIM_SET_COUNTER(&htim1,0);
HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_1);
__HAL_TIM_GET_FLAG(htim,TIM_FLAG_UPDATE) //中断标志位
__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,60-1);
HAL_TIM_IC_Start(&htim1,TIM_CHANNEL_4);
HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_3);//读取捕获值

//RTC
 __HAL_RCC_BKP_CLK_ENABLE();//使能电源时钟PW
__HAL_RCC_PWR_CLK_ENABLE();//使能电源时钟PW
HAL_PWR_EnableBkUpAccess();//取消备份区写保护
HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1,i);
i=HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1);

HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
HAL_RTC_SetDate(&hrtc, &RtcData, RTC_FORMAT_BIN);

HAL_RTC_GetTime(&hrtc, &RtcTime,RTC_FORMAT_BIN);
HAL_RTC_GetDate(&hrtc, &RtcData,RTC_FORMAT_BIN);

int fputc(int ch,FILE *f){
 uint8_t temp[1]={ch};
 HAL_UART_Transmit(&huart1,temp,1,2);
 return ch;
}

//定时器更新中断
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
	 if(htim==&htim4)
	 {
		 HAL_UART_Transmit_DMA(&huart1, (uint8_t*)data,strlen (data));
	 }
 }
//一个delay函数
void delay_ss(unsigned short time) 
{
	unsigned short i=0;
	while (time --)
	{
		i=12000;
		while(i--)
		{
			short n=1000;
			n--;
		}
	}
}
//触发式
uint8_t pbgn(void)
{
	uint8_t i=0;
	 if(  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 )==0)
		  {
			  HAL_Delay(20);
			  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 )==0);
			  HAL_Delay(20);
			  i++;
		  }
	 return i;
}
//状态式
uint8_t i=0;
void pbgn(void)
{
	 if(  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10 )==0)
		  {
			  HAL_Delay(20);
			  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10 )==0);
			  HAL_Delay(20);
			  i++;
		  }
	 if(i==2)
		 i=0;
}
//按键简单实现思路
  if(  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 )==0)
	  		 {
	  			 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13  );
	  			 while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 )==0);
	  			delay_ss(50) ;
	  		 }


 void Delay_us(uint32_t xus)      //延时函数
{
	SysTick->LOAD = 72 * xus;				//设置定时器重装值
	SysTick->VAL = 0x00;					//清空当前计数值
	SysTick->CTRL = 0x00000005;				//清空当前计数值//设置时钟源为HCLK，启动定时器
	while(!(SysTick->CTRL & 0x00010000));	//等待计数到0
	SysTick->CTRL = 0x00000004;				//关闭定时器
}
void Delay_ms(uint32_t xms)
{
    uint32_t i=xms;
    while(i--)
    {
        Delay_us(1000);
    }
}



//串口dma回调模板
uint8_t receivedata;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
	if(huart==&huart1)
		{
			HAL_UART_Transmit_DMA(&huart1, &receivedata,Size);

			
			
			  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, &receivedata, 50);
			  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);//关闭中断
			  
			  // for(int i=0;i<10;i++)
			 //receivedata[i]=0;
		}
}
记得在主函数的while上面加 ：
			  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, &receivedata, 50);
			  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);//关闭中断
如果是内容分别放文件，记得最上面加：
extern DMA_HandleTypeDef hdma_usart1_rx;
cubemax配置：
NVIC中断打开，DMA打开，发送和接收分别给DMA通道，就是都打开



 //AHT20系列函数
#define AHT20_ADDRESS 0x70
void AHT20_Init()
{
	uint8_t readBuffer;
	HAL_Delay(40);
	HAL_I2C_Master_Receive(&hi2c1,AHT20_ADDRESS,&readBuffer,1,HAL_MAX_DELAY);
	if((readBuffer&0x08)==0x00)
	{
		uint8_t sendBuffer[3]={0xbe,0x08,0x00};
		HAL_I2C_Master_Transmit(&hi2c1,  AHT20_ADDRESS, sendBuffer, 3, HAL_MAX_DELAY);
	}
}	
  AHT20_Init();主函数部分
  float temperature;
  float humidity;
  char message[50]; 
void AHT20_Read(float *Temperature ,float *Humidity)
{
	uint8_t sendBuffer[3]={0xac,0x33,0x00};
	uint8_t readBuffer[6]={0};
	HAL_I2C_Master_Transmit_IT(&hi2c1,  AHT20_ADDRESS, sendBuffer, 3);
	HAL_Delay(75);
	HAL_I2C_Master_Receive_IT(&hi2c1,AHT20_ADDRESS,readBuffer,6);
	if((readBuffer[0]&0x80)==0)
	{
		uint32_t data=((uint32_t )readBuffer[3]>>4)+((uint32_t)readBuffer[2]<<4)+((uint32_t)readBuffer[1]<<12);
		*Humidity=data*100.0f/(1<<20);

		data=(((uint32_t )readBuffer[3]&0x0f)<<16)+((uint32_t)readBuffer[4]<<8)+(uint32_t)readBuffer[5];
		*Temperature=data*200.0f/(1<<20)-50 ;
	}

}	  		 
  AHT20_Read(&temperature ,&humidity);      //while（1）
	  sprintf(message,"温度:%.1f,湿度:%.1f%%",temperature,humidity);
	  HAL_UART_Transmit(&huart1, (uint8_t*)message,strlen(message),HAL_MAX_DELAY);
	  HAL_Delay(1500);	  		 
//用中断（IT） 或者DMA      回调函数和主while循环构成状态机
//DMA和IT共用一个回调函数  IT和DMA后缀随便改
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
	if(hi2c==&hi2c1)
		{
		AHT20State =2;
		}
}
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
	if(hi2c==&hi2c1)
	{
		AHT20State =4;
	}
}
	    while (1)
  {
	  if(AHT20State ==0)
	  {
		  AHT20_Start();
		  AHT20State =1;
	  }
	  else if (AHT20State ==2)
	  {
		  HAL_Delay(75);
		  AHT20_Get();
		  AHT20State =3;
	  }
	  else if (AHT20State ==4)
	  {
		  AHT20_Analysis(&temperature ,&humidity);
		  sprintf(message,"温度:%.1f,湿度:%.1f%%",temperature,humidity);
	      HAL_UART_Transmit(&huart1, (uint8_t*)message,strlen(message),HAL_MAX_DELAY);

	      HAL_Delay(999);
	      AHT20State=4;
	  }		 
}  		
//AHT20_Read拆解成如下函数
void AHT20_Start()
{
	static uint8_t sendBuffer[3]={0Xac,0x33,0x00};
	HAL_I2C_Master_Transmit_IT(&hi2c1,  AHT20_ADDRESS, sendBuffer, 3);
}
uint8_t readBuffer[6]={0};//挪到最上
void AHT20_Get()
{
	HAL_I2C_Master_Receive_IT(&hi2c1,AHT20_ADDRESS,readBuffer,6);
}
void AHT20_Analysis(float *Temperature ,float *Humidity)
{
	if((readBuffer[0]&0x80)==0)
	{
		uint32_t data=((uint32_t )readBuffer[3]>>4)+((uint32_t)readBuffer[2]<<4)+((uint32_t)readBuffer[1]<<12);
		*Humidity=data*100.0f/(1<<20);

		data=(((uint32_t )readBuffer[3]&0x0f)<<16)+((uint32_t)readBuffer[4]<<8)+(uint32_t)readBuffer[5];
		*Temperature=data*200.0f/(1<<20)-50 ;
	}
} 



