实时时钟本质是定时器，专门用来产生年月日时分秒这种日期和时间信息的。
RTC可在STM32内部拥有一个独立运行的钟表，记录和读取日期时间可以通过操作RTC实现。
Unix时间戳，最早在Unix系统使用，很多由Unix演变而来的系统也都继承了Unix时间戳的规定。
目前Linx，Windows，安卓这些系统底层的计时系统底层都使用Unix时间戳。目前计算机世界底层，Unix时间戳都扮演着重要角色。
Unix时间戳(Unix Timestamp),指的是从UTC(原子钟)(地球自转)/GMT(地球自转)的1970年1月1日0时0分0秒开始所经过的秒数，不考虑闰秒(原子钟用来微调使得其契合地球自转的操作，会导致1分钟61秒)(当前时间戳对闰秒没有适应性)。

BKP(Backup Registers)备份寄存器，可用于存储用户应用程序数据。数据需要VBAT引脚接上备用电源来维持，只要VBAT有电源供电，即使STM32主电源断电BKP的值也可以维持原状。
当系统在待机模式下唤醒，系统复位或者电源复位，他们也不会复位。
TAMPER引脚(PC13)产生的侵入事件将所有备份寄存器内容清除（防拆功能)。
RTC引脚(PC13)输出RTC校准时钟，RTC闹钟或者秒脉冲。外部用设备测量RTC校准时钟，可以对内部RTC微小的误差进行校准。
上述两条同一时间只能使用一个。
存储有RTC时钟校准寄存器，配合上述校准时钟输出功能。
BKP容量：20字节(中容量和小容量产品)(c8t6属于中容量设备)/84字节(大容量和互联型)。
BKP处于后备区域，后备区域不只有BKP,还有RTC相关电路。
后备区域特性：当VDD主电源掉电时，后备区域仍然可以由VBAT的备用电池供电，当VDD主电源上电时，后备区域供电会由VBAT切换到VDD(主电源有电时，VBAT不会用到，可以节省电池电量)。
BKP里有数据寄存器(主要部分)(16位，可存两个字节)，控制寄存器，状态寄存器，和RTC时钟校准寄存器。
数据寄存器(对于中容量和小容量)：里面由DR1，DR2一直到DR10.而大容量和互联型设备是DR1~DR42.
侵入检测功能：从PC13位置的TAMPER引脚引入一个检测信号，当其产生一个上升沿或者下降沿时，清除BKP所有内容，以保证安全。
时钟输出：可以把RTC相关时钟，从pc13位置的RTC引脚输出出去，供外部使用，输出校准时钟时，配合校准寄存器，可以对RTC误差进行校准。

RTC(Real Time Clock)实时时钟，是一个独立的定时器，可为系统提供时钟和日历的功能，RTC和时钟配置系统处于后备区域，系统复位时数据不清零，VDD(2.0~3.6V)断电后可借助VBAT(1.8~3.6V)供电继续走时。
32位的可编程计数器，可对应Unix时间戳的秒计数器，每秒要自增一次，需要1Hz的信号，于是就有了下面
20位的可编程预分频器，可以适配不同频率的输入时钟。RTCCLK输入频率大小不一，且都很大。分频范围是1~2^20。
可选择三种RTC时钟源：HSE时钟除以128(8Hz/128),LSE振荡器时钟(通常为32.76kHMz)(RTC专用时钟，它掉电不停，其他掉电停),LSI振荡器时钟(40KHz)    三者择一接入到RTCCLK
H打头的高速时钟一般供内部程序运行和主要外设使用，I打头的低速时钟一般供RTC，看门狗这些东西使用
RTC外设内部：RTC-PRL,预分频值，一般配置成32768-1，对于后边这个来说相当于重装值。RTC-DIV,自减计数器，每来一个输入时钟从RTC-PRL设置的数开始自减，自己减到0时，再来一个输入时钟，DIV输出一个脉冲，产生溢出信号，同时DIV从PRL获取重装值，从头自减。
DIV可保持初始值为0，第一个时钟到来时，DIV立刻溢出，产生的溢出信号给后续电路，同时DIV变为重装值32767，第二个时钟变为32766.分频后就1Hz。
RTC-CNT:32位可编程计数器，就是Unix时间戳的秒计数器。
RTC-ALR：32位可编程计数器，闹钟寄存器，写一个秒数，当CNT的值跟ALR设定的闹钟值一样时，产生RTC-Alarm闹钟信号，通往对应的中断系统，中断函数里执行相应操作。
上述闹钟信号可以让STM32退出待机模式，应用：定一个中午12点闹钟，闹钟一响，芯片唤醒采集数据，然后继续待机。闹钟只能响一次，如果想要周期性响，每次响之后重新设置一个数。
RTC-Second秒中断：来源是分频后的输入时钟，开启后每秒进入一个中断。
RTC-Overflow计数器溢出中断：Unix时间戳的32位计数器溢出产生中断，到2106年才会溢出。
RTC-Alarm闹钟中断：CNT计数器和闹钟值相等时触发中断，还可以唤醒STM32(WKUP(weak up)引脚也可以唤醒设备)
RTC是APB1总线上的设备，读写寄存器通过APB1总线来完成。
启用流程：开启APB1外设中PWR和BKP的时钟，设置PWR-CR的DBP，使能对BKP和RTC的访问。
读取时，APB1总线刚开启，它快，要等RTC时钟把数据更新到APB1总线上，具体就是等到RTCCLK来一个上升沿，标准库有一个等待同步的函数。
必须设置RTC-CRL寄存器中的CNF位，使RTC进入配置模式后，才能写入RTC-PRL,CNT,ALR等寄存器。(在库函数中，每个写寄存器的函数都自动加了这个操作)。
需要等待前一次写操作写完，再写下一次。仅当RTOFF状态位为1时，才可以写入下一个数到RTC寄存器中。还是因为APB1时钟和RTC时钟不一导致的，等待RTC时钟的一个上升沿，值才被更新到RTC寄存器。