1.关于NVIC

实际应用中推荐中断越少越好,中断频率越低越好,任务之间耦合度越低越好.

硬汉哥在中断中也做了线程保护相关的操作.在写变量的时候先关掉操作这个变量的中断,肯定有自身这个中断.

不推荐在中断中使用c库函数和uint64_t 除法,执行时间很长,double这个可以用.

2.分散加载在IDE开发环境中有着举足轻重的作用.

通过分散加载我们可以很方便的指定程序代码和变量的存储位置。

比如我们想把时间关键代码放在ITCM里运行.

比如占用空间超大,又不需要快速运行的代码,我们可以放到QSPI FLASH里运行.

如果选择自己指定分散加载文件(linker),target选项中的内容会不起作用.

启动文件中__main函数,内实现了功能:将加载域中可读可写的数据复制到执行区域内. *(InRoot$$Sections)意为将__main函数安排在根域中.

中断向量表及栈指针在启动文件中的start段里.

加载文件中的   *.o (RESET, +First) 意为首先将RESET段中的.o文件放置在执行域内.

ANY和通配符*意思差不多,有细微差别.
ANY是某种类型数据可以在这个范围也可以在别的地方.
*是所有这种类型必须都在这个范围内.

   .ANY (+RO) ;意思是代码和const数据
   .ANY (+XO) ;意思excute only code
   RW ZI 可读可写数据和零初始化数据 

H7系列有好多RAM空间,而且每个RAM空间速度不一样,TCM速度最快.
高速程序安排在高速里,要求速度不高的程序安排在速度慢的RAM里.

3.关于内联汇编.

__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;
  __ASM volatile ("MRS %0, psp"  : "=r" (result):: );
  return(result);
}
简单套路:
				汇编代码
				:可以被写的东西
				:被读的东西

4.io方面

速度影响:
串口速度慢,可以选择低速.
优点是可以降低功耗,减少电磁干扰.
如果IO线步的不好,可以把速度调低一些,发出的信号比较好一些.

参考手册上描述,最快每两个时钟周期,翻转一次,他在AHB4上(200Mhz),所以最快翻转速度100Mhz

5.cache
cache一旦开启,意为着有读分配.

透写(write through):cpu把数据写到cache,也写到ram

没命中的话,就仅写到ram里了.如果没有写分配,就不会把ram里的数据再写到cache里,如果有写分配,还会把ram里的数据写到cache里.

透写相当于关闭了写cache,DMA可以直接读取数据.

cache如果开启了,就存在读分配效果. 如果命中了,cpu直接从cache里读走, 如果没命中,从ram里读到cache,以后再从cache里读.
存在数据一致性问题,DMA改了RAM,但是cpu从cache里读.

回写(write back):如果写命中了,cpu不把数据写到RAM里,仅写到cache里,并且把那些数据设置dirty,方便以后把cache里的数据更新到ram里,存在数据一致性问题.

没命中的话,cpu直接写到ram里.如果没有写分配,ram不会再把数据写到cache里.写分配相反.

读cache永远存在数据一致性问题.

回写,读写分配性能最强. 这种策略会最大限度保持数据都在cache里面处理. 能不经过ram就不经过ram.

6.如果sram,sdram没初始化. 散列文件 的 大小前加uninit.指定数据到那里面时,设置为零初始化. 注意ac5和ac6的方式不同.