1.如果有文件系统,我们可以把数据组织成文件,给这些数据起一个名字(文件),通过这些名字访问到这些数.文件系统会根据文件名为我们找到数据在磁盘中的位置.

2.文件系统时为了存储和管理数据,而在存储设备上建立的一种阻值结构.

windows常用的文件系统:FAT12,FAT16,FAT32,exFAt,NTFS

FATFS不支持NTFS.

3.FAT:File Alloction Table.文件分配表.

在小型的嵌入式存储设备大多使用的时FAT32和exFAT.

使用文件系统前,需要先对存储设备进行格式化,擦除原来的数据,在存储设备上建立文件分配表和目录.

文件系统组成:保留区,FAT表,数据区.

系统引导扇区:引导程序,以及文件系统信息(扇区字节数/每簇扇区数/保留扇区数)  (簇包含多个扇区)

文件分配表:记录文件存储中簇与簇之间连接的信息.(文件存放在第二簇,同时还可能存放于第五簇,一个文件的空间存储不是连续的,文件系统的链式存储).

根目录:存在所有文件和子目录信息(文件名/文件夹名/创建时间/文件大小)

数据区:文件等数据存放地方,占用大部分的磁盘空间.

4.文件系统用"簇"作为数据单元,一个"簇"由一组连续的扇区组成,而一个扇区大小是512字节.这里扇区起始就是块.

簇大小可设置,根据容量设置.

5.FATFS是专门用于小型嵌入式系统的通用FAT/exFAT文件系统模块.标准C语言编写,具有良好的硬件平台独立性,简单修改就可以移植到单片机上.

windows/DOS系统兼容的FAT/exFAT文件系统.

独立于硬件平台,方便跨硬件平台移植.

代码量少,效率高.

多种配置选项.

可裁剪的文件系统,不需要的功能可以去掉.

6.源码

ffconf.h :FATFS模块配置文件,根据需求来配置.
ff.h : FATFS和应用模块共用的包含文件,不用改.
ff.c : FATFS模块源码(文件系统API) ,不需要修改.
diskio.h :FATFS和disk IO模块共用的包含文件,不用改.
diskio.c :FATFS和disk IO模块接口层文件,与硬件相关代码,这里要根据硬件修改.
ffunicode.c: FATFS所支持的字体代码转换表,不用改.
ffsystem.c : FATFS的OS相关的实例代码,没用到.

所以一共需要修改两个文件,ffconf.h和diskio.c

第三方库移植,基本上需要用户编写底层驱动源码,然后提供上层配置文件供配置.

7.FATFS,用户程序,底层程序配合.

用户程序
 |
 V
 ff.c  (f_open,f_write,f_read)
 |
 V
diskio.c  (disk_write,disk_read)
 |
 V
spi flash.c (以spi flash为例,flash_read,flash_write)

8.文件系统构成.

