1.移植要点: 加文件,分好组,包含路径,按本本上来.

不要加正点原子usart那个文件.

正点原子例程里加sys

2.中断建议全抢占优先级,不带子优先级,freeRTOS方便管理.

3.vTaskDelay(1000);  这个函数会操作到中断,如果涉及开关中断,用正点原子那个延时.

4.临界段代码保护:所谓的临界段代码也叫临界区,是指那些不能被打断的代码段.

适用的场合如下:(1).外设:需要严格按照时序初始化的外设:IIC,SPI等.时序严格.

(2).系统自身需求 (3).用户自己

什么可以打断当前程序的运行? 中断,任务调度.

关中断,可以使任务调度也进行不了,因为任务调度本质用的是PendSV(最低优先级)中断.

freeRTOS在进入临界段代码的时候需要关闭中断,当处理完临界段代码后再打开中断.

taskENTER_CRITICAL()任务级进入临界段.
taskEXIT_CRITICAL()任务级进入临界段.
成对使用,支持嵌套:开头调用一次,结尾就调用一次;开头调用两次,结尾就调用两次;

taskENTER_CRITICAL_FROM_ISR()中断级退出临界段.
taskEXIT_CRITICAL_FROM_ISR()中断级退出临界段.
本质上就是开关中断.

要尽量保持临界区短.

强悍,因为就是关中断.

任务调度器的挂起和恢复:挂起任务调度器,调用此函数不需要关闭中断.
只是任务不切换了,中断照常响应.

vTaskSuspendALL() 挂起任务调度器,也支持嵌套
xTaskresumeAll() 恢复任务调度器 ,这个函数进入了临界区

5.内核进中断时自动压栈一部分寄存器值,出中断时自动出栈一部分寄存器值到CPU寄存器.

6.时间片调度简介.

(1).同等优先级任务轮流地享有相同的CPU时间(可设置),叫时间片,在FreeRTOS中,一个时间片就等于Systick中断周期.(1ms)

(2).一个时间片大小,取决于滴答定时器中断频率.

(3).没有用完(因为系统延时或者等待信号量)的时间片不会再使用,下次照样分配一整个时间片.

(4).需要把宏configUSE_TIME_SLICING和configUSE_PREEMPTION置1

7.freeRTOS时间管理.