1. EXTI(External(Extended,H7专属) Interrupt/Event Controller),外部(扩展)中断事件控制器.

2.包含20个产生事件/中断请求的边沿检测器,及总共:20条EXTI线(F1).

3.中断和事件的理解.

中断:要进入NVIC,有相应的中断服务函数,需要CPU处理.

事件:不进入NVIC,仅用于内部硬件自动控制,如:TIM,DMA,ADC.

EXTI线0~15:对应GPIO_Pin 0~15.
EXTI线16: PVD输出(电源相关).
EXTI线17: RTC闹钟事件.
EXTI线18: USB OTG FS唤醒事件.
.....
见各个系列的编程参考手册(与数据手册相对),EXTI.

4.H7系列480MHz功耗很高,为了让其在更多的低功耗领域得以应用,把能产生唤醒事件的外设用EXTI统一管理.

那些外设详细来说是:能够在系统处于停止模式或 CPU 处于 CStop 模式时生成唤醒事件的外设.(见H5编程手册p651.)

5.EXTI管理着芯片外部或者内部的唤醒事件或者中断.

外部:EXTI线0~15.
内部:EXTI线其余,芯片外设.

6.流程.

信号输入进EXTI,可配置产生中断或者事件.

F1/F4/F7:

可配置上升沿,下降沿,双边沿.

支持软件触发.

开启或者屏蔽.

有效挂起位.

H7额外:

由其他外设产生的事件(可用于输入到EXTI),分为可配置事件和直接事件.

可配置事件:基本与f1/f4/f7系列类似.
直接事件:固定上升沿检测,不支持软件触发,无挂起状态位(状态位由其他外设提供).
见H5编程手册20.1

7.H7的EXTI工作原理.

见H7手册p651.
外设产生的直接事件或者可配置事件通向"事件触发"(上升沿,下降沿,双边沿),"事件触发"受寄存器控制.接着通向屏蔽模块,也受寄存器控制,紧接着输出.

输出:可以输出到CPU,PWR(电源管理模块),D3.

输出到CPU:产生中断,产生CPU事件.
输出到PWR:可以产生CPU唤醒,唤醒D3域.
输出到D3域:产生D3域中断.
D3域也可以对EXTI进行控制,挂起清除.
见手册653.

8.ST手册规律.

笼统的框图之下必有细分的框图.

9.EXTI寄存器保留的位是直接事件不可配置.

见h7手册p657.

10.F1通过AFIO配置外部中断映射配置. AFIO还负责F1系列的重映射.
注意使能AFIO时钟.

11.F4/F7/H7系列对应的是: SYSCFG用来配置EXTI中断线0~15对应的具体IO口.
也得使能它的时钟.

12.EXTI与IO的对应关系. 

PA0~PG0(可能更多延续的字母分组号)经过AFIO(或SYSCFG)控制通往EXTI0,只能有一根输出到后续.
.
.
.
PA15~PG15(可能更多延续的字母分组号)经过AFIO(或SYSCFG)控制通往EXTI0,只能有一根输出到后续.
见f1系列编程手册,AFIO寄存器,9.2.5
高系列的SYSCFG的寄存器(关于配置EXTI的部分)跟F1系列的一样.

13.流程: GPIO->AFIO/SYSCFG->EXTI->NVIC->CPU.(EXTI0~15线)
其他外设->EXTI->NVIC->CPU(EXTI16线以后)
EXTI可以选择屏蔽,上升沿,下降沿,双边沿触发.
外设中断->NVIC->CPU(非EXTI)

14.更精确流程:
使能GPIO时钟->设置GPIO输入模式->使能AFIO/SYSCFG时钟->设置EXTI和IO对应关系->设置EXTI屏蔽,上/下沿->设置NVIC->设计中断服务函数.

15.STM32仅有EXTI0~4这5条线分别有他对应的中断服务函数,EXTI5~9这5条线共用1个中断服务函数,EXTI10~15共用1个中断服务函数.所以EXTI一共7个中断函数,都在.s文件中定义. 在共用的中断函数中,可以判断具体是哪条EXTI线发生了中断.

16.HAL库中断回调处理机制.

硬件中断服务函数 中 包含 HAL库中断处理公共函数(清除中断标志位,根据某些寄存器标志位 调用 各种 回调函数).

因为可能多种情况中断共用一个中断函数,但是这种处理机制并不是最小细分(定时器的哪个通道触发的捕获中断),只是大概细分(区分定时器更新中断还是捕获中断).

回调函数是用户自己写的.用户需要找到对应中断回调函数.