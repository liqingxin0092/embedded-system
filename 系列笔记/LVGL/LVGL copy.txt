PART(部分)
• LV_PART_MAIN A background like rectangle
• LV_PART_SCROLLBAR The scrollbar(s)
• LV_PART_INDICATOR Indicator, e.g. for slider, bar, switch, or the tick box of the checkbox
• LV_PART_KNOB Like a handle to grab to adjust the value
• LV_PART_SELECTED Indicate the currently selected option or section
• LV_PART_ITEMS Used if the widget has multiple similar elements (e.g. table cells)
• LV_PART_TICKS Ticks on scales e.g. for a chart or meter
• LV_PART_CURSOR Mark a specific place e.g. text area's or chart's cursor
• LV_PART_CUSTOM_FIRST Custom parts can be added from here.

STATE(状态)
• LV_STATE_DEFAULT Normal, released state
• LV_STATE_CHECKED Toggled or checked state
• LV_STATE_FOCUSED Focused via keypad or encoder or clicked via touchpad/mouse
• LV_STATE_FOCUS_KEY Focused via keypad or encoder but not via touchpad/mouse
• LV_STATE_EDITED Edit by an encoder
• LV_STATE_HOVERED Hovered by mouse (not supported now)
• LV_STATE_PRESSED Being pressed
• LV_STATE_SCROLLED Being scrolled
• LV_STATE_DISABLED Disabled state

Align(对齐方法)
• LV_ALIGN_TOP_LEFT
• LV_ALIGN_TOP_MID
• LV_ALIGN_TOP_RIGHT
• LV_ALIGN_BOTTOM_LEFT
• LV_ALIGN_BOTTOM_MID
• LV_ALIGN_BOTTOM_RIGHT
• LV_ALIGN_LEFT_MID
• LV_ALIGN_RIGHT_MID
• LV_ALIGN_CENTER
   
/*活动屏幕*/
scr_act_height()
scr_act_weight()

    /*设置对齐两种方式*/
    lv_obj_set_align(obj, align);
    lv_obj_align(obj, align, x, y);

   lv_obj_add_state(btn,  LV_STATE_PRESSED );//上来设置一个控件的默认状态.

    /*创建对象*/
    lv_obj_t *obj1 = lv_obj_create(lv_scr_act());
    lv_obj_set_size(obj1, 100, 100);  //尺寸

    /*创建样式*/
    static lv_style_t style; //这个必须是全局变量,静态或者是动态分配的.
    lv_style_init(&style);   //初始化样式.
    lv_style_set_bg_color(&style,lv_color_hex(0xf4b183));//设置背景颜色

    /*添加样式*/
    lv_obj_add_style(obj1,&style,LV_STATE_DEFAULT);

    /*边框操作*/
    lv_obj_set_style_bg_color(obj1,lv_color_hex(0xf4b183),LV_STATE_DEFAULT);//不用创建样式
	lv_obj_set_style_border_color(obj1,lv_color_hex(0x743ad5),LV_STATE_DEFAULT);//设置边框颜色
    lv_obj_set_style_border_width(obj1,9,LV_STATE_DEFAULT);//设置边框宽度

	/*轮廓操作*/    轮廓就是包在边框外面的一层
    lv_obj_set_style_outline_color(obj1,lv_color_hex(0x00a000),LV_STATE_DEFAULT);//设置边框颜色
    lv_obj_set_style_outline_width(obj1,9,LV_STATE_DEFAULT);//设置边框宽度
    lv_obj_set_style_outline_opa(obj1,100,LV_STATE_DEFAULT);//设置边框透明度,0~255,越大越不透明.

    lv_obj_add_event_cb(obj,my_event_cb,LV_EVENT_CLICKED,NULL);//添加事件.

    lv_obj_set_style_bg_color(label,lv_color_hex(0xff0000),LV_STATE_DEFAULT);//标签的背景色
    lv_obj_set_style_bg_opa(label,100,LV_STATE_DEFAULT);//标签的透明度
    lv_obj_set_style_text_font(label,&lv_font_montserrat_30,LV_STATE_DEFAULT);//字体大小
    lv_obj_set_style_text_color(label,lv_color_hex(0xffe604),LV_STATE_DEFAULT);//字体颜色

    lv_label_set_recolor(label,true);//开启重绘色
    lv_label_set_text(label,"hello #04ff50 lvgl#");//更改个别字体颜色.得加上面那句.
    
    lv_obj_set_style_text_align(label,LV_TEXT_ALIGH_CENTER,LV_PART_MAIN);//标签字体居中
    lv_obj_set_width(label,scr_act_width()/3);//把一个部件设置成三分之一屏的宽度.

/*事件回调函数*/
static void my_event_cb(lv_event_t *e)
{
    lv_event_code_t code=lv_event_get_code(e);//回调函数里获取事件类型
    lv_obj_t *target=lv_event_get_target(e);//获取调用者
}

/*设置位置大小都可以*/
lv_obj_set_x(btn, lv_pct(10)); //百分比设置
lv_obj_set_size(btn,lv_pct(20),lv_pct(20)); //大小

/*给按键添加文本*/ //其实就创建个标签放上去
lv_obj_t* label=lv_label_create(btn);
lv_obj_set_style_text_font(label,&lv_font_montserrat_30,LV_PART_MAIN);
lv_label_set_text(label,"text");
lv_obj_set_align(label,LV_ALIGN_CENTER);

/*开关创建*/
lv_obj_t *switch1=lv_switch_create(lv_scr_act());
lv_obj_set_size(switch1,100,100); //大小
lv_obj_set_align(switch1,LV_ALIGN_CENTER);
lv_obj_align(switch1, LV_ALIGN_CENTER, x, y);

/*开关组成部分*/
LV_PART_MAIN 主体 灰色那个
LV_PART_KNOB 手柄 圆圈
LV_PART_INDICATOR 指示器 蓝色那个
开关打开看不到主体,开关关闭看不到指示器.

注意!!!!!!!!想让指示器生效,必须设定一下按键的触发状态
lv_obj_set_style_bg_color(switch1,lv_color_hex(0xcd463a),LV_STATE_CHECKED|LV_PART_INDICATOR);

/*添加,清除开关状态*/
lv_obj_add_state(switch1,LV_STATE_CHECKED);
lv_obj_add_state(switch1,LV_STATE_CHECKED|LV_STATE_DISABLED)//添加打开状态,且不可修改
lv_obj_clear_state(switch1,LV_STATE_CHECKED|LV_STATE_DISABLED)//清除打开状态

/*判断开关状态*/
lv_obj_has_state(switch1,LV_STATE_CHECKED); //返回值:bool类型,开:1,关:0.

/*添加事件*/
lv_obj_add_event_cb(btn,event_cb,LV_EVENT_VALUE_CHANGED,NULL);

/*开关的一个回调*/
static void event_cb(lv_event_t *e)
{
    lv_event_code_t code=lv_event_get_code(e);
    lv_obj_t *target=lv_event_get_target(e);//获取调用者
    if(target==switch1)
    {
        if(code==LV_EVENT_VALUE_CHANGED)
        {
            if(lv_obj_has_state(switch1,LV_STATE_CHECKED))
                printf("ON\n");
            else
                printf("OFF\n");
        }
    }
}

/*复选框部件的组成部分*/
主体: LV_PART_MAIN
勾选框: LV_PART_INDICATOR

/*复选框部件创建*/
lv_obj_t *checkbox=lv_checkbox_create(lv_scr_act());

/*复选框文本设置*/
lv_checkbox_set_text(checkbox,"remember the password");//设置文本框内容.
lv_obj_set_style_pad_column(checkbox,20,LV_STATE_DEFAULT);//设置文本和勾选框的间距.

/*添加,清除复选框状态*/
lv_obj_add_state(checkbox,LV_STATE_CHECKED|LV_STATE_DISABLED);//设置,并且不可动.
lv_obj_clear_state(checkbox,LV_STATE_CHECKED|LV_STATE_DISABLED);//设置,并且不可动.

/*判断复选框状态*/
lv_obj_has_state(checkbox,LV_STATE_CHECKED);是这个状态就1,不是就0.

/*进度条部件组成部分*/
主体: LV_PART_MAIN
指示器: LV_PART_INDICATOR

/*创建进度条部件*/
lv_obj_t* bar=lv_bar_create(lv_scr_act());

/*设置动画时间*/
lv_obj_set_style_anim_time(bar,500,LV_STATE_DEFAULT);//动画设置必须放在当前值设置之前.时间参数单位是ms.

/*设置大小,当前值,范围值*/
lv_obj_set_size(bar,400,20); //设置大小
lv_bar_set_value(bar,50,LV_ANIM_ON);//设置当前值,同时开启动画.
lv_set_range(bar,-100,100); //设置范围值

/*进度条拓展,设置模式,起始值*/
lv_bar_set_mode(bar,LV_BAR_MODE_RANGE);//模式设置
参数可以取:
LV_BAR_MODE_NORMAL,//从最小值开始加载
LV_BAR_MODE_SYMMETRICAL,//从 值0 开始绘制到当前值,当前值无限制
LV_BAR_MODE_RANGE //允许设置起始值,但起始值必须小于当前值.

lv_bar_set_start_value(bar,-50,LV_ANIM_OFF);

/*加载器部件组成部分*/
主体: LV_PART_MAIN
指示器: LV_PART_INDICATOR
手柄: LV_PART_KNOB

/*创建加载器部件*/
lv_obj_t *spinner=lv_spinner_create(parent,spin_time,arc_length);

/*设置圆弧颜色*/
lv_obj_set_style_arc_color(spinner,lv_color_hex(0x4a9f00),LV_PART_MAIN);//设置主体颜色.后两个参数,单位:ms,像素
lv_obj_set_style_arc_color(spinner,lv_color_hex(0x4a9f00),LV_PART_INDICATOR);//设置指示器颜色.

/*设置颜色宽度*/
lv_obj_set_style_arc_width(spinner,30,LV_PART_MAIN);//设置主体圆弧宽度.
lv_obj_set_style_arc_width(spinner,30,LV_PART_INDICATOR);//设置指示器圆弧宽度.

/*创建lv_led部件*/
lv_obj_t *led =lv_led_create(lv_scr_act());

/*设置LED颜色,亮度*/
lv_led_set_color(led,lv_color_hex(0xff0000));
lv_led_set_brightness(led,0);//范围0~255

/*设置LED状态*/
lv_led_on(led);//默认255,有宏可修改
lv_led_off(led);//默认0,有宏可修改
lv_led_toggle(led);

/*列表部件组成部分*/
LV_PART_MAIN
LV_PART_SCROLLBAR

/*创建列表部件*/
lv_obj_t *list=lv_list_create(lv_scr_act());
lv_obj_set_size(list,100,100); //大小
lv_obj_set_align(list,LV_ALIGN_CENTER);

/*添加列表文本*/
lv_list_add_text(list,"Settings");

/*添加列表按钮*/
lv_obj_t *btn=lv_list_add_btn(list,LV_SYMBOL_WIFI,"WLAN");

/*获取列表按钮文本*/
lv_list_get_btn_text(list,list_btn);
也可以通过按钮名字判断.

/*下拉列表组成部分*/
BUTTON 按钮
LIST 列表

/*创建下拉列表部件*/
lv_obj_t *dd=lv_dropdown_create(lv_scr_act());
lv_obj_set_size(dd,100,100); //大小
lv_obj_set_align(dd,LV_ALIGN_CENTER);

/*设置选项内容*/
lv_dropdown_set_options(dd,"a\nb\nc\nd");//动态创建
lv_dropdown_set_options_static(dd,"a\nb\nc\nd");//静态创建
lv_dropdown_add_option(dd,"e",4);//添加选项,从0开始

/*设置默认选中选项*/  //注意索引从零开始.
lv_dropdown_set_selected(dd,1);

/*获取选项内容*/
lv_dropdown_get_selected(dd);//获取索引
char buf[10];
lv_dropdown_get_selected_str(dd,buf,sizeof(buf));

/*设置方向和图标*/
lv_dropdown_set_dir(dd,LV_DIR_RIGHT);//设置列表展开方向
lv_dropdown_set_symbol(dd,LV_SYMBOL_RIGHT);//设置图标

/*添加回调*/
lv_obj_add_event_cb(dd,event_cb,LV_EVENT_VALUE_CHANGED,NULL);

/*滚轮部件组成部分*/
LV_PART_MAIN 主体
LV_PART_SELECTED 选项框

/*创建滚轮部件*/
lv_obj_t *roller=lv_roller_create(lv_scr_act());
lv_obj_set_size(roller,300,100); //大小
lv_obj_set_align(roller,LV_ALIGN_CENTER);

/*设置选项间隔*/
lv_obj_set_style_text_line_space(roller,30,LV_STATE_DEFAULT);

/*设置选项内容,滚动模式*/
lv_roller_set_options(roller,"a\nb\nc\nd",LV_ROLLER_MODE_NORMAL);

/*设置当前所选项*/
lv_roller_set_selected(roller,3,LV_ANIM_ON);

/*设置可见行数*/
lv_roller_set_visible_row_count(roller,2);

/*获取选项内容*/
lv_roller_get_selected(roller);//获取索引

char buf[10];
lv_roller_get_selected_str(roller,buf,sizeof(buf));//获取选项文本

/*滑块组成部分*/
主体 LV_PART_MAIN
指示器 LV_PART_INDICATOR
旋钮 LV_PART_KNOB

/*滑块创建*/
lv_obj_t *slider = lv_slider_create(lv_scr_act());
lv_obj_center(slider);

/*设置大小,当前值,范围值*/
lv_obj_set_size(slider,20,200);
lv_slider_set_value(slider,50,LV_ANIM_OFF);//设置当前值
lv_slider_set_range(slider,-100,100);//设置范围值

/*获取当前值*/
lv_slider_get_value(slider);

/*滑块模式设置*/
lv_slider_set_mode(slider,LV_SLIDER_MODE_NORMAL);

/*设置获取左值*/
lv_slider_set_left_value(slider,20,LV_ANIM_OFF);//只针对第三个模式
lv_slider_get_left_value(slider);
//左值特指第三个模式中左边的那个值

/*图标的添加*/
lv_obj_t * sound_label=lv_label_create(lv_scr_act());
lv_label_set_text(sound_label,LV_SYMBOL_VOLUME_MAX);
lv_obj_set_style_text_font(sound_label,&lv_font_montserrat_30,LV_STATE_DEFAULT);

/*圆弧组成部分*/
背景弧 LV_PART_MAIN
前景弧形 LV_PART_INDICATOR
旋钮 LV_PART_KNOB

/*圆弧的创建*/
lv_obj_t *arc=lv_arc_create(lv_scr_act());
lv_obj_set_size(arc,100,100); //大小
lv_obj_set_align(arc,LV_ALIGN_CENTER);

/*设置范围值,当前值*/
lv_arc_set_range(arc,0,200);
lv_arc_set_value(arc,150);

/*设置圆弧角度*/
lv_arc_set_angles(arc,135,270);//这个函数尽量少用,因为当前值不会跟着变化
lv_arc_set_bg_angles(arc,135,45);//设置背景弧角度

/*设置旋转角度*/
lv_arc_set_rotation(arc,180);

/*获取当前值*/
lv_arc_get_value(arc);

/*设置模式,圆弧绘制速率*/
lv_arc_set_mode(arc,LV_ARC_MODE_REVERSE);//设置模式.
lv_arc_set_change_rate(arc,90);//设置速度,90度每秒

/*设置圆弧宽度*/
lv_obj_set_style_arc_width(arc_left,arc_width,LV_PART_MAIN);

/*去除部件*/
lv_obj_remove_style(arc,NULL,LV_PART_KNOB);
/*去除属性*/
lv_obj_clear_flag(arc,LV_OBJ_FLAG_CLICKABLE);

/*线条部件组成部分*/
LV_PART_CURSOR

/*创建线条部件*/
lv_obj_t *line = lv_line_create(lv_scr_act());

/*设置线条坐标点*/
static lv_point_t line_points[]={{15,5},{25,20},{5,20},{15,5}};
lv_line_set_points(line,line_points,4);

/*设置线条样式*/
lv_obj_set_style_line_width(line,8,LV_PART_MAIN);//设置宽度
lv_obj_set_style_line_rounded(line,true,LV_PART_MAIN);//设置圆角

/*设置y轴反转*/
lv_line_set_y_invert(line,true);

/*图片部件创建*/
lv_obj_t *img=lv_img_create(lv_scr_act());

/*设置图片源*/
LV_IMG_DECLARE(img_bird);//声明图片
lv_img_set_src(img,&img_bird);//声明图片源

lv_img_set_offset_x(img,100);
lv_img_set_offset_y(img,20);

//图片重新着色
lv_obj_set_style_img_recolor(img,lv_color_hex(0xffe1d2),LV_PART_MAIN);
lv_obj_set_style_img_recolor_opa(img,150,LV_PART_MAIN);

/*居中显示*/
lv_obj_center(img);

/*图片放缩*/
lv_img_set_zoom(img,512);

/*设置中心点*/
lv_obj_update(img);
lv_img_set_pivot(img,0,0);

/*根据中心点顺时针方向旋转90度*/
lv_img_set_angle(img,900);//成比例

/*创建色环部件*/
lv_obj_t *cw =lv_colorwheel_create(parent,knob_recolor);

/*设置当前选中颜色*/
lv_colorwheel_set_rgb(cw,lv_color_hex(0xff0000));

/*获取当前选中颜色*/
lv_colorwheel_get_rgb(cw);

/*设置色环模式*/
lv_colorwheel_set_mode(cw,LV_COLORWHEEL_MODE_HUE/SATURATION/VALUE);//色相,饱和度,明度
lv_colorwheel_set_mode_fixed(cw,true);//固定色环模式

/*色环圆弧宽度*/
lv_obj_set_style_arc_width(cw,10,LV_PART_MAIN);

/*色环组成部分*/
主体: LV_PART_MAIN
旋钮: LV_PART_KNOB

/*设置圆角*/
lv_obj_set_style_radius(obj,10,LV_PART_MAIN);

/*按钮部件组成*/
主体 LV_PART_MAIN
按钮 LV_PART_ITEMS

/*创建矩阵按钮部件*/
lv_obj_t *btnm=lv_btnmatrix_create(lv_scr_act());

/*设置按钮数量文本*/
static const char* map[]={"btn1","\n","btn2","btn3",""};//定义按钮数组,最后一个元素必须为空
lv_btnmatrix_set_map(btnm,map);//设置按钮

/*设置按钮相对宽度*/
lv_btnmatrix_set_btn_width(btnm,id,width);

/*获取按钮索引,文本*/
lv_btnmatrix_get_selected_btn(btnm);//获取索引
lv_btnmatrix_get_btn_text(btnm,2);//获取文本

/*设置清除矩阵按钮属性*/
lv_btnmatrix_set_btn_ctrl(btnm,id,LV_BTN...);
lv_btnmatrix_clear_btn_ctrl(btnm,id,LV_BTN...);
lv_btnmatrix_set_btn_ctrl_all(btnm,LV_BTN...);

/*矩阵按钮属性*/
LV_BTNMATRIX_CTRL_HIDDEN,//隐藏
LV_BTNMATRIX_CTRL_DISANBLE,//失能
LV_BTNMATRIX_CTRL_CHECKABLE,//允许切换状态
LV_BTNMATRIX_CTRL_RECOLOR,//允许文本重着色

/*设置单次选中属性*/
lv_btnmatrix_set_one_checked(btnm,true);

/*移除滚动条*/
lv_obj_remove_style(obj,NULL,LV_PART_SCROLLBAR);

/*文本区域部件组成部分*/
LV_PART_MAIN 主体
....
详细内容见手册

/*my demo - 图片按钮*/

lv_obj_t * win;
LV_IMG_DECLARE(abc);//声明图片
uint16_t a;
static void event_cb(lv_event_t *e)
{
    lv_event_code_t code=lv_event_get_code(e);
    lv_obj_t *target=lv_event_get_target(e);//获取调用者
    if(target==win)
    {
        if(lv_obj_has_state(win,LV_IMGBTN_STATE_PRESSED))
        {
             lv_obj_set_style_img_recolor(win, lv_color_hex(0x00ff00), LV_STATE_DEFAULT);
             a=1;

        }
        else if (lv_obj_has_state(win,LV_IMGBTN_STATE_CHECKED_RELEASED))
        {
             lv_obj_set_style_img_recolor(win, lv_color_hex(0x8a8a8a), LV_STATE_DEFAULT);
                a=0;
        }
    }
}

void my_app(void)
{
win = lv_imgbtn_create(lv_scr_act());
lv_imgbtn_set_src(win, LV_IMGBTN_STATE_RELEASED, NULL, &abc,NULL);
lv_obj_set_size(win,32,32);
lv_obj_add_flag(win,LV_OBJ_FLAG_CHECKABLE);//按键状态切换
lv_obj_set_style_img_recolor_opa(win, 250, LV_STATE_DEFAULT);
lv_obj_set_style_img_recolor(win, lv_color_hex(0x8a8a8a), LV_STATE_DEFAULT);
lv_obj_add_event_cb(win,event_cb,LV_EVENT_VALUE_CHANGED,NULL);
}