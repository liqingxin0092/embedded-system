1.CMSIS  全称：Cortex Microcontroller Software Interface Standard  翻译：Cortex微控制器软件接口标准。

2.启动文件(汇编写的 ，后缀.s)作用：作为系统上电后执行的第一个程序，进行堆栈初始化，中断向量表以及中断函数的定义，调用函数，进入main

3.stack栈，heap堆

4.栈主要用于存放局部变量，函数形参等，属于编译器自动分配和释放的内存，栈的大小不能超过内部SRAM  的大小。如果工程的程序量比较大，定义的局部变量比较多，那么就需要在启动代码中修改栈的大小，即修改Stack_Size 的值。如果程序出现了莫名其妙的错误，并进入了HardFault 的时候，你就要考虑下是不是栈空间不够大，溢出了的问题。

5.堆主要用于动态内存的分配，像 malloc()、calloc()和 realloc()等函数申请的内存就在堆上面。堆中的内存一般由程序员分配和释放，若程序员不释放，程序结束时可能由操作系统回收。

6.冯诺依曼结构:
程序和数据混着放.访问程序的时候不能访问数据.  
访问程序和访问数据分时复用.
优点: 总线资源占用少.  缺点:执行效率低.

哈佛结构:
程序和数据分开放.
分别有各自的地址和数据总线来访问程序存储器或者数据存储器.
优点:执行效率高. 缺点:总线资源占用多.

7.单片机发展趋势(注意体会).

CPU:高主频,64位,双核,指令流水线.
存储器:MB级,片内ROM开始FLASH化,程序加密化(信息安全受到重视).
IO:增加IO口驱动能力,增加IO功能.
外围电路内置化(提高集成度):DMA,AD,DA,液晶驱动等内置到片内.
品种多样化:低功耗化,微型化,低价格,专用化.

8.CISC  VS  RISC

复杂指令集计算机(CISC):

目的: 为了便于编程和提高存储器访问效率.

特点:(1).指令多,模式多,各式可变.
    (2).指令执行需要的时钟周期差距很大.
    (3).无流水线或流水线程度较低.
    (4).指令由微代码翻译执行.

优点:(1).指令丰富,功能强大.
    (2).寻址方式灵活

缺点:(1).指令使用率不均衡.
    (2).不利于采用先进结构提高性能.
    (3).结构复杂不利于超大规模集成电路实现.

精简指令集计算机(RISC):

目的:为了提高计算机运行速度

特点:(1).指令少,模式少,格式固定.
    (2).大多数指令只需要一个时钟周期.
    (3).流水线结构.
    (4).指令直接由硬件执行.

优点:(1).指令精简,易于设计,使用率均衡.
    (2).程序执行效率低.

缺点:(1).指令数较少.
    (2).寻址方式不够灵活.

9.单片机性能的一个指标: DMIPS(每秒处理多少百万条指令).   DMIPS/MHz (每兆赫兹 每秒处理多少百万条指令).

10.不同内核区别(Cortex-M3/-M4/-M7).

核心版本: Cortex-M3用的ARMv7-M, -M4和-M7用的ARMv7E-M.
指令系统: Thumb/Thumb-2.
DSP指令扩展:Cortex-M3无,-M4/-M7有.
浮点单元:-M3无,-M4单精度浮点单元,-M7可选单/双精度浮点单元.
流水线:-M3 3级, -M4:3级+分支预测, -M7:6级+分支预测.
中断:NVIC,NMI+1~240物理中断源,8~256个中断优先级.
都有系统滴答定时器.
睡眠模式:都集成WFI和WFE指令以及退出睡眠功能.
调试:可选JTAG和SWD.
内存保护:-M3和-M4都是可选8个区域MPU,-M7可选8,16个区域MPU.
DMIPS/MHZ:-M3和-M4都是1.25,-M7是2.14.
CoreMarK/MHz(MCU的CPU跑分):-M3和-M4都是3.34,-M7是5.01