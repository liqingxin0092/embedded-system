1.  引入：某种芯片（比如MPU6050）是通过读写寄存器来控制运行的，寄存器作为存储器的一种被分配到线性的存储空间。需求：单片机可以控制外部的寄存器。
	
	任务流程：单片机发设备地址、读写操作、数据，从机开始工作并向单片机发送数据。发送时不需要接收，接收时不需要发送，如果使用串口会导致始终有一根线处于空闲状态，所以这种协议只需要一根通信线。

	主机与从机互相发送数据，双方有没有收到。协议需要具备一种应答机制。

	主机可以通过这种协议控制多个从机。

	像串口样的异步通信，要求双方的传输速率非常严格，时钟不能有过大偏差。如果单片机进入中断了，接收方还再按照协议规定接收数据，就出错了。因为异步通信对时间要求很严格。

	如果协议是同步协议，加一条时钟线来指导对方读写，对传输的时间要求就不高了，单片机也可以随时暂停传输去处理其他事情，因为暂停传输的同时，时钟线也暂停了，所以传输双方都可以定格在暂停的时刻。

	使用同步时序可以极大降低单片机对硬件电路的依赖，即使没有硬件电路的支持，也可以很方便地用软件手动翻转电平来实现通信。

	异步通信也有好处，可以省一根时钟线，节省资源；缺点就是对时间要求比较严格，对硬件电路比较依赖
	同步时序，对事件要求不严格，对硬件不怎么依赖。缺点是多一根时钟线。

2.基本要求：通过通信线，实现单片机读写外挂模块。在指定位置写寄存器，在指定位置读寄存器。

3.I2C，全称Inter IC Bus，引脚 SCL ( Serial Clock)串行时钟线 ,SDA (Serial Data)串行数据线。同步，半双工，带数据应答，支持挂载多设备，一主多从，还可以多主多从，主机冲突时需要进行仲裁。

4.硬件：所有设备的SCL接在一起，所有设备的SDA接在一起

4*.任何时候，主机都是完全掌控SCL线，在空闲状态下，主机可以主动发起对SDA的控制，只有在从机发送数据或者从机应答时，主机才会转交SDA的控制权给从机。

4*.主机SDA线在发送的时候是输出，在接收的时候是输入；同样从机的SDA也会在输入和输出间反复切换。

	如果配置为推挽输出，总线时序没有协调好，可能发生主机和从机的SDA引脚同时处于输出状态，如果正好一个输出高电平，一个输出低电平，这个状态就是电源短路，是要极力避免的。

	所以为了避免总线没协调好导致电源短路这个问题，I2c设计是：禁止所有设备输出强上拉的高电平，应该配置为开漏加弱上拉（阻值一般为4.7k欧姆）

	开漏加弱上拉兼具输入与输出功能：若想输出，写0是强下拉到低电平，写1弱上拉到高电平；若想输入，主机输出高电平，此时是弱上拉，从机可以进行下拉操作来输出数据。

	开漏加弱上拉模式下，只要有任意一个或者多个设备输出了低电平，总线就处于低电平，只有所有设备输出了高电平，总线才输出高电平。i2c可以利用这个特征实现多主机模式下的时钟同步和总线仲裁。SCL虽然可以在一主多从模式下可以用推挽输出，但是它仍然采用了开漏加弱上拉的设计，因为在多主机模式下会用到这个设计。

5.i2c时序基本单元，见江科大PPT。    时序需要考虑到MCU的主频，和从机支持的速率

	(1)起始时序：在i2c总线处于空闲状态时，SCL和SDA由上拉电阻拉高至高电平，当主机进行数据收发时，要打破总线宁静：在SCL高电平期间，把SDA拽下来，产生一个下降沿，当从机捕获到这个信号时，从机就会进行自身复位，等待主机召唤，在SDA下降沿之后，主机要再把SCL拽下来，一方面是占用这个总线，也为了基本时序单元的拼接。
	
	之后会保证：除了起始和终止条件，每个时序单元都是以低电平开始，低电平结束。

	(2)终止时序：在scl高电平期间，SDA产生一个上升沿。之后两线都是高电平，回归空闲状态. 这里需要为在SCL高电平期间，让SDA产生上升沿而预先将SDA拉低。

	(3)发送一个字节：SCL低电平期间，主机依次将数据位放到SDA线上(高位先行)；然后主机释放SCL，从机在SCL高电平期间读取数据。SCL高电平期间，SDA不允许有变化。

	简单来说：就是  SCL低放数据，SCL高从机读取数据，循环8次。
	
	(4)接收一个字节：SCL低电平期间，从机将数据放到SDA线上(高位先行)，然后释放主机SCL，主机在SCL高电平期间读取数据位，也是循环8次。
	
	注意：主机在接收之前，需要释放SDA，不然数据线是强下拉，从机怎么操控都没用。释放SDA，相当于是上拉输入模式。
	
	这里需要考虑到从机能否跟得上单片机IO口的翻转速度，否则会导致从机没来得及在SCL低电平期间放数据，SCL电平就直接翻转了。

	(5).发送应答：主机在接收完一个字节后，在下一个时钟发送一位数据，0表示应答(因为有向下拉的动作)，1表示非应答(因为默认上拉)。如果从机发送数据后，得到主机应答，那从机还会继续发送，如果没有得到主机应答，从机就停止发送数据，释放SDA

	(6).接收应答：主机在发送完一个字节后，在下一个时钟接收一位数据，0表示应答(因为有向下拉的动作)，1表示非应答(因为默认上拉)，用来判断从机是否接收到主机刚才发的数据，读取到0说明收到了。
	
	注意：主机需要释放SDA。

6.从机设备那么多，如何确定主机要访问哪个设备呢？

	需要把每个设备都确定一个唯一的设备地址。主机在起始条件之后，先发送设备的地址，来确定操控哪个设备。同一条i2c总线上，挂载的每个设备的地址必须不一样。地址一般为7位地址。如果两个设备一样，可以通过设备上的ADx引脚改变设备地址

7.i2c时序：

	(1).指定地址写：写入指定设备地址，再写入该设备寄存器地址，写入指定数据. 发送设备地址的方式为：(7位设备地址<<1)+读写位，如果要读，读写位为1，如果要写，读写位为0.

	**重要知识补充：在从机中，所有的寄存器被分配到了一个线性区域中，并且会有一个单独的指针变量指示着其中的一个寄存器，这个指针上电默认指向0，并且，每写入一个字节和读走一个字节后，这个指针就会自动自增一次。

	（2）指定地址读：发从机地址|0，发寄存器地址

	