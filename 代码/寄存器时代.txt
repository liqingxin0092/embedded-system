void SetSysClockTo72(void)
{

    RCC->CR |= 1 << 16;//开启HSE
    while (((RCC->CR >> 17) & 1) == 0);//等待HSE准备

    FLASH->ACR |= 2;    //配置系统时钟与FLASH读取延时

    RCC->CFGR &= ~(1 << 7);    //AHB  不分频
    RCC->CFGR &= ~(1 << 13);   //APB2 不分频
    RCC->CFGR |= 4 << 8;       //APB1 2分频

    RCC->CFGR |= 1 << 16;   //选择HSE输入PLL
    RCC->CFGR |= 7 << 18;   //PLL9倍频

    RCC->CR |= 1 << 24;//开启PLL
    while (((RCC->CR >> 25) & 1) == 0);//等待PLL准备

    RCC->CFGR |= 2;//选择PLL作为系统时钟
    while (((RCC->CFGR >> 2) & 3) != 2);//等待PLL准备作为系统时钟
}


//GPIO配置例程
    RCC->APB2ENR|=0x04;  //开启GPIOA的时钟
    
    GPIOA->CRL&=~(1<<10);//配置A2推挽
    GPIOA->CRL|=1<<9;  //配置A2  2MHZ
    
    GPIOA->CRL&=~(1<<14);//配置A3推挽
    GPIOA->CRL|=1<<13;  //配置A3  2MHZ


//PWM输入

  //使能PWM输出
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  //使能输入捕获
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
  TIM1->CNT=0;

float persent;
uint16_t fre;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	uint32_t CCR1_Count,CCR2_Count;
	if(htim==&htim1)//捕获定时器
	{
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2)//TI1FP2，下降沿
		{
			CCR2_Count=TIM1->CCR2;
		}
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)//TI1FP1,上升沿,复位
		{
			CCR1_Count=TIM1->CCR1;
			persent=(float)CCR2_Count/CCR1_Count*100;
			fre=1000000/CCR1_Count;
		}

	}
}